#!/usr/bin/env python3
import sys
import os
from jarvis_util import *
from scspkg.scspkg_manager import ScspkgManager, ModuleType
from scspkg.pkg import Package
from scspkg.pkg_manager import PackageManager


class ScspkgArgs(ArgParse):
    def define_options(self):
        self.scspkg = ScspkgManager.get_instance()
        self.pkg_mngr = PackageManager()

        # scspkg init
        self.add_menu('init',
                      msg='Initialize SCSPKG installation')
        self.add_args([
            {
                'name': 'USE_LMOD',
                'msg': 'Whether to use LMOD or not for modulefiles',
                'type': bool,
                'required': False,
                'default': True,
                'pos': True
            }
        ])

        # scspkg reset
        self.add_menu('reset',
                      msg='Remove all packages')

        # scspkg create
        self.add_menu('create',
                      msg='Create a new package',)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to create',
                'required': True,
                'pos': True
            }
        ])

        # scspkg list
        self.add_menu('list',
                      msg='List existing packages',
                      keep_remainder=True)
        self.add_args([
            {
                'name': 'REGEX',
                'msg': 'The regex to search for',
                'required': False,
                'pos': True
            }
        ])

        # scspkg destroy
        self.add_menu('destroy',
                      msg='Destroy a set of packages',
                      keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to destroy',
                'required': True,
                'pos': True
            },
        ])

        # scspkg add deps
        self.add_menu('add deps',
                      msg='Add modules this package depends on',
                      keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            },
            {
                'name': 'DEP_NAME',
                'msg': 'The name of the dependency to add',
                'required': True,
                'pos': True
            }
        ])

        # scspkg list deps
        self.add_menu('list deps',
                      msg='List modules this package depends on',
                      keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg rm deps
        self.add_menu('rm deps',
                      msg='Remove dependencies from this module',
                      keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg env prepend
        self.add_menu('env prepend',
                      msg='Prepend a value to a package environment variable',
                      keep_remainder=True,
                      remainder_as_kv=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg env set
        self.add_menu('env set',
                      msg='Set the value for a package environment variable',
                      keep_remainder=True,
                      remainder_as_kv=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg pkg root
        self.add_menu('pkg root',
                      msg='Get the root directory of the package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg pkg src
        self.add_menu('pkg src',
                      msg='Get the src directory of the package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg schema path
        self.add_menu('schema path',
                      msg='Get the path to the YAML schema for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg schema show
        self.add_menu('schema show',
                      msg='Print the YAML schema for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module path
        self.add_menu('module path',
                      msg='Get the path to the modulefile for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module show
        self.add_menu('module show',
                      msg='Print the modulefile for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

    """
    INITIALIZATION CLI
    """

    def init(self):
        if self.kwargs['USE_LMOD']:
            self.scspkg.module_type = ModuleType.LMOD
        else:
            self.scspkg.module_type = ModuleType.TCL
        self.scspkg.init()

    def reset(self):
        self.pkg_mngr.reset()

    def create(self):
        self.pkg_mngr.create_pkgs(self.kwargs['PKG_NAME'])

    def list(self):
        self.pkg_mngr.list(self.kwargs['REGEX'])
        self.pkg_mngr.list(self.remainder)

    def destroy(self):
        self.pkg_mngr.destroy_pkgs(self.kwargs['PKG_NAME'])
        self.pkg_mngr.destroy_pkgs(self.remainder)

    def add_deps(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        pkg.add_deps(self.kwargs['DEP_NAME'])
        pkg.add_deps(self.remainder)
        pkg.save()

    def list_deps(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        pkg.ls_deps()

    def rm_deps(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        pkg.rm_deps(self.kwargs['DEP_NAME'])
        pkg.rm_deps(self.remainder)
        pkg.save()

    def env_prepend(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        for key, val in self.kwargs.items():
            pkg.prepend_env(key, val)
        pkg.save()

    def env_set(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        for key, val in self.kwargs.items():
            pkg.set_env(key, val)
        pkg.save()

    def pkg_root(self):
        print(Package(self.kwargs['PKG_NAME']).pkg_root)

    def pkg_src(self):
        print(Package(self.kwargs['PKG_NAME']).pkg_src)

    def schema_path(self):
        print(Package(self.kwargs['PKG_NAME']).module_schema_path)

    def schema_show(self):
        print(Package(self.kwargs['PKG_NAME']).get_module_schema())

    def module_path(self):
        print(Package(self.kwargs['PKG_NAME']).module_path)

    def module_show(self):
        print(Package(self.kwargs['PKG_NAME']).get_modulefile())


if __name__ == '__main__':
    args = ScspkgArgs()
    args.process_args()
