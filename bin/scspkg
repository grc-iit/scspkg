#!/usr/bin/env python3
import sys,os
import shutil
import json
import re

class ArgumentParser:
    def __init__(self):
        self._args = {}
        return

    def help(self, terminate=True):
        print("Usage:")
        print("scspkg list")
        print("scspkg build-profile")
        print("scspkg create package1 ... packageN")
        print("scspkg from-spack spack_query new_package_name")
        print("scspkg rm package1 ... packageN")
        print("scspkg set-env package env_name env_data")
        print("scspkg prepend-env package env_name env_data")
        print("scspkg rm-env package env_name")
        print("scspkg rm-prepend package env_name env_data")
        print("scspkg add-deps package dep1 ... depN")
        print("scspkg rm-deps package dep1 ... depN")
        print("scspkg ls-deps package dep1 ... depN")
        print("scspkg pkg-root package1 ... packageN")
        print("scspkg pkg-src package1 ... packageN")
        print("scspkg module-path package1 ... packageN")
        print("scspkg modules-path")
        print("scspkg schema-path package1 ... packageN")
        print("scspkg show-schema package1 ... packageN")
        print("scspkg reset-schema package1 ... packageN")
        print("scspkg show-module package1 ... packageN")
        if terminate:
            exit(1)

    def run(self):
        if len(sys.argv) < 2:
            self.help()
        self.option = sys.argv[1]
        self.packages = sys.argv[2:]
        return self

class Package:
    def __init__(self, package_name):
        self.name = package_name
        self.root = os.getenv("SCSPKG_ROOT")
        self.pkgs = os.path.join(self.root, "packages")
        self.pkg_root = os.path.join(self.pkgs, package_name)
        self.pkg_src = os.path.join(self.pkg_root, "src")
        self.module_path = os.path.join(self.root, "modulefiles", self.name)
        self.module_schema_path = os.path.join(self.root, "modulefiles_json", self.name)
        self.build_config()
        self._load_config()

    @staticmethod
    def _build_config(pkg_root, name):
        sections = {}
        sections["description"] = {
            "Name": name,
            "Version": "None",
            "Description": "None"
        }
        sections["deps"] = {}
        sections["setenvs"] = {}
        sections["prepends"] = {
            "PATH": [os.path.join(pkg_root, "bin"), os.path.join(pkg_root, "sbin")],
            "LD_LIBRARY_PATH": [os.path.join(pkg_root, "lib"), os.path.join(pkg_root, "lib64")],
            "LIBRARY_PATH": [os.path.join(pkg_root, "lib"), os.path.join(pkg_root, "lib64")],
            "INCLUDE": [os.path.join(pkg_root, "include")],
            "CPATH": [os.path.join(pkg_root, "include")],
            "CFLAGS": [os.path.join(pkg_root, "include")],
            "LDFLAGS": [os.path.join(pkg_root, "lib"), os.path.join(pkg_root, "lib64")]
        }
        return sections

    def build_config(self, pkg_root=None):
        if pkg_root is None:
            pkg_root = self.pkg_root
        self.sections = self._build_config(pkg_root, self.name)

    def rebuild_config(self):
        self.build_config()
        self.save_config()

    def _load_config(self):
        if os.path.exists(self.module_schema_path):
            with open(self.module_schema_path, 'r') as fp:
                self.sections.update(json.load(fp))

    def save_config(self):
        #Save the module schema
        with open(self.module_schema_path, 'w') as fp:
            json.dump(self.sections, fp, indent=4)
        #Save the module file
        with open(self.module_path, 'w') as fp:
            #The module header
            module = "#%Module1.0\n"
            #The module description
            for descriptor_key, descriptor_value in self.sections["description"].items():
                module += "module-whatis \"{}: {}\"\n".format(descriptor_key, descriptor_value)
            #The module dependencies
            for dep in self.sections["deps"].keys():
                module += "module load \"{}\"\n".format(dep)
            #The module environment variables
            for env,env_data in self.sections["setenvs"].items():
                module += "setenv {} \"{}\"\n".format(env, env_data)
            #The module environment prepends
            for env,values in self.sections["prepends"].items():
                if env == 'LDFLAGS':
                    #ldflags = [f"-L {value}" for value in values]
                    #for value in ldflags:
                    #    module += "prepend-path --delim \"  \" {} \"{}\"\n".format(env, value)
                    pass
                elif env == 'CFLAGS':
                    #cflags = [f"-I {value}" for value in values]
                    #for value in cflags:
                    #    module += "prepend-path --delim \"  \" {} \"{}\"\n".format(env, value)
                    pass
                else:
                    for value in values:
                        module += "prepend-path {} \"{}\"\n".format(env, value)
            fp.write(module)

    def remove(self):
        if os.path.exists(self.pkg_root):
            shutil.rmtree(self.pkg_root)
        if os.path.exists(self.module_path):
            os.remove(self.module_path)
        if os.path.exists(self.module_schema_path):
            os.remove(self.module_schema_path)

    def set_env(self, env_name, env_data):
        self.sections["setenvs"][env_name] = env_data
        self.save_config()

    def prepend_env(self, env_name, env_data):
        if env_name not in self.sections["prepends"]:
            self.sections["prepends"][env_name] = []
        self.sections["prepends"][env_name].insert(0, env_data)
        self.save_config()

    def rm_env(self, env_name):
        del self.sections["setenvs"][env_name]
        self.save_config()

    def rm_prepend(self, env_name, env_data):
        self.sections["prepends"][env_name].remove(env_data)
        self.save_config()

    def add_deps(self, deps):
        for dep in deps:
            self.sections["deps"][dep] = True
        self.save_config()

    def rm_deps(self, deps):
        for dep in deps:
            if dep in self.sections["deps"]:
                del self.sections["deps"][dep]
        self.save_config()

    def ls_deps(self):
        for dep in self.sections["deps"].keys():
            print(dep)

    def get_package_root(self):
        if os.path.exists(self.pkg_root):
            return self.pkg_root
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

    def get_package_src(self):
        if os.path.exists(self.pkg_src):
            return self.pkg_src
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

    def get_module_schema_path(self):
        if os.path.exists(self.module_schema_path):
            return self.module_schema_path
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

    def get_module_schema(self):
        if os.path.exists(self.module_schema_path):
            return json.dumps(self.sections, indent=4)
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

    def get_modulefile(self):
        try:
            with open(self.module_path, 'r') as f:
                return f.read()
        except:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

class SCSPKG:
    def __init__(self):
        self.root = os.getenv("SCSPKG_ROOT")
        self.pkgs = os.path.join(self.root, "packages")

    def create_packages(self, packages):
        for package_name in packages:
            package_path = os.path.join(self.pkgs, package_name)
            if not os.path.exists(package_path):
                os.mkdir(package_path)
                os.mkdir(os.path.join(package_path, 'src'))
                Package(package_name).save_config()
            else:
                print("Error: the package {} already exists".format(package_name))

    def rm_packages(self, packages):
        for package_name in packages:
            Package(package_name).remove()

    def ls_deps(self, packages):
        for package_name in packages:
            Package(package_name).ls_deps()

    def print_package_roots(self, packages):
        for package_name in packages:
            print(Package(package_name).get_package_root())

    def print_package_srcs(self, packages):
        for package_name in packages:
            print(Package(package_name).get_package_src())

    def print_module_path(self, packages):
        for package_name in packages:
            print(os.path.join(self.root, "modulefiles", package_name))

    def print_modules_path(self):
        print(os.path.join(self.root, "modulefiles"))

    def print_module_schema_paths(self, packages):
        for package_name in packages:
            print(Package(package_name).get_module_schema_path())

    def print_module_schemas(self, packages):
        for package_name in packages:
            print(Package(package_name).get_module_schema())

    def print_modules(self, packages):
        for package_name in packages:
            print(Package(package_name).get_modulefile())

    def rebuild_module_schemas(self, packages):
        if packages[0] == '*':
            for package_name in os.listdir(os.path.join(self.root, "packages")):
                Package(package_name).rebuild_config()
        else:
            for package_name in packages:
                Package(package_name).rebuild_config()

    def list(self):
        for item in os.listdir(os.path.join(self.root, "packages")):
            print(item)

    def _get_env(self, var, prefix=None):
        try:
            if prefix is None:
                return "{}={}".format(var, self._os_env(var))
            else:
                return "{}={}".format(prefix, self._os_env(var))
        except:
            return None

    def _copy_env_parents(self, vars, prefix):
        cpy = set()
        for var in vars:
            paths = self._os_env(var).split(':')
            for path in paths:
                cpy.add(os.path.dirname(path))
        cpy = ":".join(list(cpy))
        return f"{prefix}={cpy}"

    def _os_env(self, name):
        if name in os.environ:
            return os.environ[name]
        return ""

    def build_profile(self):
        vars = ['PATH', 'LD_LIBRARY_PATH', 'LIBRARY_PATH', 'INCLUDE', 'JAVA_HOME']
        CMAKE_PREFIX_PATH = self._copy_env_parents(vars, 'CMAKE_PREFIX_PATH')
        profile = [self._get_env(var) for var in vars]
        profile = [val for val in profile if val is not None]
        profile.append(CMAKE_PREFIX_PATH)
        if self._get_env('INCLUDE') is not None:
            profile.append(self._get_env('INCLUDE', prefix='CPATH'))
        profile = ";".join(profile, )
        print(profile)

if __name__ == "__main__":
    args = ArgumentParser().run()
    if args.option == 'create':
        SCSPKG().create_packages(args.packages)
    elif args.option == 'rm':
        SCSPKG().rm_packages(args.packages)
    elif args.option == 'set-env':
        Package(args.packages[0]).set_env(args.packages[1], args.packages[2])
    elif args.option == 'prepend-env':
        Package(args.packages[0]).prepend_env(args.packages[1], args.packages[2])
    elif args.option == 'rm-env':
        Package(args.packages[0]).rm_env(args.packages[1])
    elif args.option == 'rm-prepend':
        Package(args.packages[0]).rm_prepend(args.packages[1], args.packages[2])
    elif args.option == 'add-deps':
        Package(args.packages[0]).add_deps(args.packages[1:])
    elif args.option == 'rm-deps':
        Package(args.packages[0]).rm_deps(args.packages[1:])
    elif args.option == 'ls-deps':
        SCSPKG().ls_deps(args.packages)
    elif args.option == 'pkg-root':
        SCSPKG().print_package_roots(args.packages)
    elif args.option == 'pkg-src':
        SCSPKG().print_package_srcs(args.packages)
    elif args.option == 'module-path':
        SCSPKG().print_module_path(args.packages)
    elif args.option == 'modules-path':
        SCSPKG().print_modules_path()
    elif args.option == 'schema-path':
        SCSPKG().print_module_schema_paths(args.packages)
    elif args.option == 'show-schema':
        SCSPKG().print_module_schemas(args.packages)
    elif args.option == 'reset-schema':
        SCSPKG().rebuild_module_schemas(args.packages)
    elif args.option == 'show-module':
        SCSPKG().print_modules(args.packages)
    elif args.option == 'list':
        SCSPKG().list()
    elif args.option == 'build-profile':
        SCSPKG().build_profile()
    elif args.option == 'repo':
        print(os.getenv("SCSPKG_ROOT"))
    else:
        print("Invalid option: {}".format(args.option))
        args.help()
