#!/usr/bin/env python3
import sys,os,subprocess
import shutil
import json

class ArgumentParser:
    def __init__(self):
        self._args = {}
        return

    def help(self, terminate=True):
        print("Usage:")
        print("scspkg list")
        print("scspkg create package1 ... packageN")
        print("scspkg remove package1 ... packageN")
        print("scspkg add_deps package dep1 ... depN")
        print("scspkg rm_deps package dep1 ... depN")
        print("scspkg pkg-root package1 ... packageN")
        print("scspkg pkg-src package1 ... packageN")
        print("scspkg schema-path package1 ... packageN")
        print("scspkg show-schema package1 ... packageN")
        if terminate:
            exit(1)

    def run(self):
        if len(sys.argv) < 2:
            self.help()
        self.option = sys.argv[1]
        self.packages = sys.argv[2:]
        return self

class Package:
    def __init__(self, package_name):
        self.name = package_name
        self.root = os.getenv("SCSPKG_ROOT")
        self.pkg_root = os.path.join(self.root, "packages", package_name)
        self.pkg_src = os.path.join(self.pkg_root, "src")
        self.module_path = os.path.join(self.root, "modulefiles", self.name)
        self.module_schema_path = os.path.join(self.root, "modulefiles_json", self.name)
        self.sections = {}
        self.sections["description"] = {
            "Name": self.name,
            "Version": "None",
            "Description": "None"
        }
        self.sections["deps"] = {}
        self.sections["prepends"] = {
            "PATH": [os.path.join(self.pkg_root, "bin")],
            "LD_LIBRARY_PATH": [os.path.join(self.pkg_root, "lib"), os.path.join(self.pkg_root, "lib64")],
            "LIBRARY_PATH": [os.path.join(self.pkg_root, "lib"), os.path.join(self.pkg_root, "lib64")],
            "INCLUDE_PATH": [os.path.join(self.pkg_root, "include")],
            "CPATH": [os.path.join(self.pkg_root, "include")],
        }
        self._load_config()

    def _exec(self, cmd):
        subprocess.Popen(cmd.split()).wait()

    def _load_config(self):
        if os.path.exists(self.module_schema_path):
            with open(self.module_schema_path, 'r') as fp:
                self.sections.update(json.load(fp))

    def save_config(self):
        #Save the module schema
        with open(self.module_schema_path, 'w') as fp:
            json.dump(self.sections, fp, indent=4)
        #Save the module file
        with open(self.module_path, 'wb') as fp:
            #The module header
            module = "#%Module1.0\n"
            #The module description
            for descriptor_key, descriptor_value in self.sections["description"].items():
                module += "module-whatis \"{}: {}\"\n".format(descriptor_key, descriptor_value)
            #The module dependencies
            for dep in self.sections["deps"].keys():
                module += "module load \"{}\"\n".format(dep)
            #The module environment edits
            for env,values in self.sections["prepends"].items():
                for value in values:
                    module += "prepend-path {} \"{}\"\n".format(env, value)
            fp.write(bytes(module, "utf-8"))

    def remove(self):
        if os.path.exists(self.pkg_root):
            shutil.rmtree(self.pkg_root)
        if os.path.exists(self.module_path):
            os.remove(self.module_path)
        if os.path.exists(self.module_schema_path):
            os.remove(self.module_schema_path)

    def add_deps(self, deps):
        for dep in deps:
            self.sections["deps"][dep] = True
        self.save_config()

    def rm_deps(self, deps):
        for dep in deps:
            if dep in self.sections["deps"]:
                del self.sections["deps"][dep]
        self.save_config()

    def get_package_root(self):
        if os.path.exists(self.pkg_root):
            return self.pkg_root
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

    def get_package_src(self):
        if os.path.exists(self.pkg_src):
            return self.pkg_src
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

    def get_module_schema_path(self):
        if os.path.exists(self.module_schema_path):
            return self.module_schema_path
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

    def get_module_schema(self):
        if os.path.exists(self.module_schema_path):
            return json.dumps(self.sections, indent=4)
        else:
            print("Error: Package {} does not exist".format(self.name))
            exit(1)

class SCSPKG:
    def __init__(self):
        self.root = os.getenv("SCSPKG_ROOT")

    def create_packages(self, packages):
        for package_name in packages:
            package_path = os.path.join(self.root, "packages", package_name)
            if not os.path.exists(package_path):
                os.mkdir(package_path)
                os.mkdir(os.path.join(package_path, 'src'))
                Package(package_name).save_config()
            else:
                print("Error: the package {} already exists".format(package_name))

    def rm_packages(self, packages):
        for package_name in packages:
            Package(package_name).remove()

    def print_package_roots(self, packages):
        for package_name in packages:
            print(Package(package_name).get_package_root())

    def print_package_srcs(self, packages):
        for package_name in packages:
            print(Package(package_name).get_package_src())

    def print_module_schema_paths(self, packages):
        for package_name in packages:
            print(Package(package_name).get_module_schema_path())

    def print_module_schemas(self, packages):
        for package_name in packages:
            print(Package(package_name).get_module_schema())

    def list(self):
        os.listdir(os.path.join(self.root, "packages"))

if __name__ == "__main__":
    args = ArgumentParser().run()
    if args.option == 'create':
        SCSPKG().create_packages(args.packages)
    elif args.option == 'remove':
        SCSPKG().rm_packages(args.packages)
    elif args.option == 'add_deps':
        Package(args.packages[0]).add_deps(args.packages[1:])
    elif args.option == 'rm_deps':
        Package(args.packages[0]).rm_deps(args.packages[1:])
    elif args.option == 'pkg-root':
        SCSPKG().print_package_roots(args.packages)
    elif args.option == 'pkg-src':
        SCSPKG().print_package_srcs(args.packages)
    elif args.option == 'schema-path':
        SCSPKG().print_module_schema_paths(args.packages)
    elif args.option == 'show-schema':
        SCSPKG().print_module_schemas(args.packages)
    elif args.option == 'list':
        SCSPKG().list()
    else:
        print("Invalid option: {}".format(args.option))
        args.help()
