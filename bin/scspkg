#!/usr/bin/env python3
import sys
import os
from jarvis_util import *
from scspkg.scspkg_manager import ScspkgManager, ModuleType
from scspkg.pkg import Package
from scspkg.pkg_manager import PackageManager
import re


class ScspkgArgs(ArgParse):
    def define_options(self):
        self.scspkg = ScspkgManager.get_instance()
        self.pkg_mngr = PackageManager()

        # scspkg init
        self.add_cmd('init',
                     msg='Initialize SCSPKG installation')
        self.add_args([
            {
                'name': 'type',
                'msg': 'What type of module system to use',
                'type': str,
                'default': 'tcl',
                'choices': ['tcl', 'bash'],
                'required': False,
                'default': False,
                'pos': True
            }
        ])

        # scspkg reset
        self.add_cmd('reset',
                     msg='Remove all packages')

        # scspkg create
        self.add_cmd('create',
                     msg='Create a new package',)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to create',
                'required': True,
                'pos': True
            }
        ])

        # scspkg list
        self.add_cmd('list',
                     msg='List existing packages',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'REGEX',
                'msg': 'The regex to search for',
                'required': False,
                'pos': True
            }
        ])

        # scspkg destroy
        self.add_cmd('destroy',
                     msg='Destroy a set of packages',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to destroy',
                'required': True,
                'pos': True
            },
        ])

        # scspkg dep
        self.add_menu('dep',
                      msg='Modify modulefiles this package depends on',
                      keep_remainder=True)

        # scspkg dep add
        self.add_cmd('dep add',
                     msg='Add modules this package depends on',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            },
            {
                'name': 'DEP_NAME',
                'msg': 'The name of the dependency to add',
                'required': True,
                'pos': True
            }
        ])

        # scspkg dep list
        self.add_cmd('dep list',
                     msg='List modules this package depends on',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg dep pop
        self.add_cmd('dep pop',
                     msg='Remove dependencies from this module',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            },
            {
                'name': 'DEP_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg env
        self.add_menu('env',
                      msg='Modify environment variables',
                      keep_remainder=True)

        # scspkg env prepend
        self.add_cmd('env prepend',
                     msg='Prepend a value to a package environment variable',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            },
            {
                'name': 'ENV_NAME',
                'msg': 'The environment variable to update',
                'required': True,
                'pos': True
            },
            {
                'name': 'PREPEND_VAL',
                'msg': 'Prepend value',
                'required': True,
                'pos': True
            }
        ])

        # scspkg env set
        self.add_cmd('env set',
                     msg='Set the value for a package environment variable',
                     keep_remainder=True,
                     remainder_as_kv=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg env pop
        self.add_cmd('env pop',
                     msg='Pop a value from package environment variable',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            },
            {
                'name': 'ENV_NAME',
                'msg': 'The name of the variable to pop from',
                'required': True,
                'pos': True
            }
        ])

        # scspkg env unset
        self.add_cmd('env unset',
                     msg='Unset the value for a package environment variable',
                     keep_remainder=True)
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update',
                'required': True,
                'pos': True
            }
        ])

        # scspkg pkg
        self.add_menu('pkg',
                      msg='Get various paths for a package')

        # scspkg pkg root
        self.add_cmd('pkg root',
                     msg='Get the root directory of the package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg pkg src
        self.add_cmd('pkg src',
                     msg='Get the src directory of the package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg schema
        self.add_menu('schema',
                      msg='Query and modify the SCSPKG package schema YAML')

        # scspkg schema path
        self.add_cmd('schema path',
                     msg='Get the path to the YAML schema for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg schema show
        self.add_cmd('schema show',
                     msg='Print the YAML schema for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg schema rebuild
        self.add_cmd('schema rebuild',
                     msg='Rebuild the YAML schema for the package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module
        self.add_menu('module',
                      msg='Query and modify the SCSPKG modulefile')

        # scspkg module dir
        self.add_cmd('module dir',
                     msg='Get the path to the modulefile directory')

        # scspkg module path
        self.add_cmd('module path',
                     msg='Get the path to the modulefile for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module avail
        self.add_cmd('module avail',
                     msg='Print available packages')
        self.add_args([
            {
                'name': 'REGEX',
                'msg': 'The regex to search for',
                'type': str,
                'default': None,
                'required': False,
                'pos': True
            }
        ])

        # scspkg module show
        self.add_cmd('module show',
                     msg='Print the modulefile for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module rebuild
        self.add_cmd('module rebuild',
                     msg='Rebuild module for package without '
                         'deleting original schema')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module reset
        self.add_cmd('module reset',
                     msg='Reset module for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module load 
        self.add_cmd('module load',
                        msg='Load the module for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg module unload
        self.add_cmd('module unload',
                        msg='Unload the module for package')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to query',
                'required': True,
                'pos': True
            }
        ])

        # scspkg build profile
        self.add_cmd('build profile',
                     msg='Collect useful environment variables.')
        self.add_args([
            {
                'name': 'PKG_NAME',
                'msg': 'The name of the package to update. If none, '
                       'will simply print the environment in a way'
                       'compatible with the IDE.',
                'required': False,
                'default': None,
                'pos': True
            },
            {
                'name': 'path',
                'msg': 'Save profile to the path.',
                'required': False,
                'default': None,
                'pos': False,
                'type': str,
                'aliases': ['p']
            },
            {
                'name': 'method',
                'msg': 'The type of profile to create.',
                'required': False,
                'default': 'dotenv',
                'pos': False,
                'type': str,
                'aliases': ['m']
            }
        ])

    """
    INITIALIZATION CLI
    """

    def init(self):
        if self.kwargs['type'] == 'tcl':
            self.scspkg.module_type = ModuleType.TCL
        elif self.kwargs['type'] == 'bash':
            self.scspkg.module_type = ModuleType.BASH
        self.scspkg.init()
        self.scspkg.change_module_type(self.scspkg.module_type)

    def reset(self):
        self.pkg_mngr.reset()

    def create(self):
        self.pkg_mngr.create_pkgs(self.kwargs['PKG_NAME'])

    def list(self):
        self.pkg_mngr.list(self.kwargs['REGEX'])
        self.pkg_mngr.list(self.remainder)

    def destroy(self):
        self.pkg_mngr.destroy_pkgs(self.kwargs['PKG_NAME'])
        self.pkg_mngr.destroy_pkgs(self.remainder)

    def dep_add(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        pkg.add_deps(self.kwargs['DEP_NAME'])
        pkg.add_deps(self.remainder)
        pkg.save()

    def dep_list(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        pkg.ls_deps()

    def dep_pop(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        pkg.pop_deps(self.kwargs['DEP_NAME'])
        pkg.pop_deps(self.remainder)
        pkg.save()

    def env_prepend(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        key = self.kwargs['ENV_NAME']
        val = self.kwargs['PREPEND_VAL']
        pkg.prepend_env(key, val)
        for val in self.remainder:
            pkg.prepend_env(key, val)
        pkg.save()

    def env_set(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        for key, val in self.remainder_kv.items():
            pkg.set_env(key, val)
        pkg.save()

    def env_pop(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        key = self.kwargs['ENV_NAME']
        for val in self.remainder:
            pkg.pop_prepend(key, val)
        pkg.save()

    def env_unset(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        for key in self.remainder:
            pkg.rm_env(key)
        pkg.save()

    def pkg_root(self):
        print(Package(self.kwargs['PKG_NAME']).pkg_root)

    def pkg_src(self):
        print(Package(self.kwargs['PKG_NAME']).pkg_src)

    def schema_path(self):
        print(Package(self.kwargs['PKG_NAME']).module_schema_path)

    def schema_show(self):
        print(Package(self.kwargs['PKG_NAME']).get_module_schema())

    def schema_rebuild(self):
        Package(self.kwargs['PKG_NAME']).reset_config().save()

    def module_avail(self):
        print('Available packages:')
        for pkg_name in self.scspkg.avail():
            if self.kwargs['REGEX'] and not re.search(self.kwargs['REGEX'], pkg_name):
                continue
            print(f'  {pkg_name}')

    def module_dir(self):
        print(self.scspkg.module_dir)

    def module_path(self):
        print(Package(self.kwargs['PKG_NAME']).module_path)

    def module_show(self):
        print(Package(self.kwargs['PKG_NAME']).get_modulefile())

    def module_rebuild(self):
        Package(self.kwargs['PKG_NAME']).save()

    def module_reset(self):
        Package(self.kwargs['PKG_NAME']).reset_config().save()

    def module_load(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        print(pkg.module_load())

    def module_unload(self):
        pkg = Package(self.kwargs['PKG_NAME'])
        print(pkg.module_unload())

    def build_profile(self):
        if self.kwargs['PKG_NAME'] is None:
            self.scspkg.build_profile(self.kwargs['path'], self.kwargs['method'])
        else:
            Package(self.kwargs['PKG_NAME']).build_profile(rebuild=True).save()



if __name__ == '__main__':
    args = ScspkgArgs()
    args.process_args()
